{
  "address": "0xE4a658B83aF78f76D1231370ce417f3b61c61181",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "int256[2][]",
          "name": "_coordinates",
          "type": "int256[2][]"
        }
      ],
      "name": "isPolygon",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256[2][][][]",
          "name": "_coordinates",
          "type": "int256[2][][][]"
        }
      ],
      "name": "multiPolygonArea",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256[2][][]",
          "name": "_coordinates",
          "type": "int256[2][][]"
        }
      ],
      "name": "polygonArea",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x239bdce384df3a89c856184b7352ae915323725b08d605decb208cc993c56e9e",
  "receipt": {
    "to": null,
    "from": "0xf73d7f5A890a131f12E4fB03E50277c49748Cf5E",
    "contractAddress": "0xE4a658B83aF78f76D1231370ce417f3b61c61181",
    "transactionIndex": 1,
    "gasUsed": "1083619",
    "logsBloom": "0x
    "blockHash": "0x8c0da7d787a1073180b8e7d85e244f37711b0ac860536049588b0b33b94b580b",
    "transactionHash": "0x239bdce384df3a89c856184b7352ae915323725b08d605decb208cc993c56e9e",
    "logs": [],
    "blockNumber": 13097980,
    "cumulativeGasUsed": "1226004",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "68426a560eaecbef1f3ea51cb3cb6807",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256[2][]\",\"name\":\"_coordinates\",\"type\":\"int256[2][]\"}],\"name\":\"isPolygon\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[2][][][]\",\"name\":\"_coordinates\",\"type\":\"int256[2][][][]\"}],\"name\":\"multiPolygonArea\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[2][][]\",\"name\":\"_coordinates\",\"type\":\"int256[2][][]\"}],\"name\":\"polygonArea\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"isPolygon(int256[2][])\":{\"params\":{\"_coordinates\":\"Polygon ring\"},\"returns\":{\"_0\":\"Boolean whether the coordinates represents a closed polygon or not\"}},\"multiPolygonArea(int256[2][][][])\":{\"params\":{\"_coordinates\":\"Big Number integer coordinates of a multi polygon\"},\"returns\":{\"_0\":\"Area measured in square meters\"}},\"polygonArea(int256[2][][])\":{\"params\":{\"_coordinates\":\"Big Number integer coordinates of a single polygon - an array of rings\"},\"returns\":{\"_0\":\"Area measured in square meters\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isPolygon(int256[2][])\":{\"notice\":\"Checks to make sure first and last coordinates are the same\"},\"multiPolygonArea(int256[2][][][])\":{\"notice\":\"Calculate the area of a multi polygon coordinates\"},\"polygonArea(int256[2][][])\":{\"notice\":\"Calculate the area of a single polygon coordinates\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/AreaCalculation.sol\":\"AreaCalculation\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/AreaCalculation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport { Trigonometry } from \\\"../lib/Trigonometry.sol\\\";\\n\\n\\nlibrary AreaCalculation {\\n    // Multiplications exponents to avoid decimals\\n    int256 private constant RAD_EXP = 1e9; // Radians exponent\\n    int256 private constant SIN_EXP = 1e9; // Sine exponent\\n    int256 private constant COORD_EXP = 1e9; // Coordinates exponent\\n    int256 private constant PI_EXP = 1e9; // Pi exponent\\n\\n    // Other constants\\n    int256 private constant PI = 3141592653;\\n    int256 private constant EARTH_RADIUS = 6371008; // m\\n\\n    /**\\n     * @notice Calculate the area of a multi polygon coordinates\\n     * @param _coordinates Big Number integer coordinates of a multi polygon\\n     * @return Area measured in square meters\\n    */\\n    function multiPolygonArea(int256[2][][][] memory _coordinates) public pure returns (uint256) {\\n        uint256 total = 0;\\n\\n        for (uint256 i = 0; i < _coordinates.length; i++) {\\n            total += polygonArea(_coordinates[i]);\\n        }\\n\\n        return total;\\n    }\\n\\n    /**\\n     * @notice Calculate the area of a single polygon coordinates\\n     * @param _coordinates Big Number integer coordinates of a single polygon - an array of rings\\n     * @return Area measured in square meters\\n    */\\n    function polygonArea (int256[2][][] memory _coordinates) public pure returns (uint256) {\\n        int256 total = 0;\\n\\n        if (_coordinates.length > 0) {\\n            total += abs(ringArea(_coordinates[0]));\\n\\n            for (uint256 i = 1; i < _coordinates.length; i++) {\\n                total -= abs(ringArea(_coordinates[i]));\\n            }\\n        }\\n        return uint256(total);\\n    }\\n\\n    /**\\n     * @notice Calculate the area of a coordinates ring (a polygon single part).\\n        Obtained from Turf.js area function\\n        (https://github.com/Turfjs/turf/blob/master/packages/turf-area/index.ts)\\n     * @param _coordinates Big Number integer coordinates of a single polygon ring\\n     * @return Area measured in square meters\\n    */\\n    function ringArea(int256[2][] memory _coordinates) private pure returns (int256) {\\n        bool isValidPolygon = isPolygon(_coordinates);\\n        require(isValidPolygon == true);\\n\\n        uint256 coordsLength = _coordinates.length;\\n        int256[2] memory p1;\\n        int256[2] memory p2;\\n        int256[2] memory p3;\\n        uint256 lowerIndex;\\n        uint256 middleIndex;\\n        uint256 upperIndex;\\n        int256 total = 0;\\n\\n        if (coordsLength > 2) {\\n            for (uint256 i = 0; i < coordsLength; i++) {\\n                if (i == coordsLength - 2) {\\n                    // i = N-2\\n                    lowerIndex = coordsLength - 2;\\n                    middleIndex = coordsLength - 1;\\n                    upperIndex = 0;\\n                } else if (i == coordsLength - 1) {\\n                    // i = N-1\\n                    lowerIndex = coordsLength - 1;\\n                    middleIndex = 0;\\n                    upperIndex = 1;\\n                } else {\\n                    // i = 0 to N-3\\n                    lowerIndex = i;\\n                    middleIndex = i + 1;\\n                    upperIndex = i + 2;\\n                }\\n                p1 = _coordinates[lowerIndex];\\n                p2 = _coordinates[middleIndex];\\n                p3 = _coordinates[upperIndex];\\n\\n                int256 v1 = nanoRad(p3[0]);\\n                int256 v2 = nanoRad(p1[0]);\\n                int256 v3 = nanoSin(p2[1]);\\n\\n                int256 subTotal = (v1 - v2) * v3;\\n                total += subTotal;\\n            }\\n\\n            // Must divide by all exponents applied before\\n            total = total * EARTH_RADIUS**2 / (2 * RAD_EXP * SIN_EXP * PI_EXP * COORD_EXP);\\n        }\\n        return total;\\n    }\\n\\n    /**\\n     * @notice Calculate nano radians (radians * 10^9) of a certain degree angle.\\n     * @param _angle Degree angle (0-360\\u00ba)\\n     * @return Nano radians\\n    */\\n    function nanoRad(int256 _angle) private pure returns (int256) {\\n        return (_angle * PI * RAD_EXP) / (180);\\n    }\\n\\n    /**\\n     * @notice Calculate nano sine (sine * 10^9) of a certain degree angle.\\n        The sine of an angle is given in a range [-1, 1]. The argument of the sine function \\n        is usually radians, which exists in a range [0, 2\\u03c0 rad]. Since this is not possible in \\n        Solidity, the following function returns the angle in 'nano' units (sine * 10^9). To do \\n        so, the sine is calculated using integer values. Instead of using a circle divided \\n        in 360 angle units (degrees), it assumes a circle divided in 1073741824 angle units (tAngle).\\n        To convert from degrees to tAngle units we need to do the following:\\n            tAngle = (degrees * 1073741824) / 360;\\n        The returning value exists on a range [-2147483647, 2147483647] (signed 32-bit). Therefore, to \\n        finally get the sine value, we need to divide the sin() function by 2147483647;\\n     * @param _angle Degree angle (0-360\\u00ba)\\n     * @return Nano sine\\n    */\\n    function nanoSin(int256 _angle) private pure returns (int256) {\\n        int256 angleUnits = 1073741824;\\n        int256 maxAngle = 2147483647;\\n        int256 tAngle = (_angle * angleUnits) / (360 * COORD_EXP);\\n        return Trigonometry.sin(uint256(tAngle)) * int(SIN_EXP) / maxAngle;\\n    }\\n\\n    /**\\n     * @notice Returns the absolute value of the input\\n     * @param _value Input integer value\\n     * @return Absolute input value\\n    */\\n    function abs(int256 _value) private pure returns (int256) {\\n        return _value >= 0\\n            ? _value\\n            : -_value;\\n    }\\n\\n    /**\\n     * @notice Checks to make sure first and last coordinates are the same\\n     * @param _coordinates Polygon ring\\n     * @return Boolean whether the coordinates represents a closed polygon or not\\n    */\\n    function isPolygon (int256[2][] memory _coordinates) public pure returns (bool) {\\n        uint256 length = _coordinates.length;\\n        if (length > 2) {\\n            // Coordinates of first coordinate of polygon\\n            int256 firstLat = _coordinates[0][0];\\n            int256 firstLon = _coordinates[0][1];\\n            // Coordinates of last coordinate of polygon\\n            int256 lastLat = _coordinates[length - 1][0];\\n            int256 lastLon = _coordinates[length - 1][1];\\n\\n            return (firstLat == lastLat && firstLon == lastLon);\\n        }\\n\\n        return false;\\n    }\\n}\",\"keccak256\":\"0x8c2dfd0115e34fb612cceea93fbca7ddd133e31ff497a4dc8dac5f63f84314a8\",\"license\":\"MIT\"},\"lib/Trigonometry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n/**\\n * SPDX-Licenses-Identifier: MIT\\n * Basic trigonometry functions\\n *\\n * Based on the Trigonometry Library by Lefteris Karapetsas:\\n * https://github.com/Sikorkaio/sikorka/blob/master/contracts/trigonometry.sol\\n * \\n * This version implements a 32-bit lookup tables instead of a 16-bit. This\\n * allows accurate topological operations on small areas with very close coordinates.\\n *\\n * @author Daniel Serrano\\n */\\n\\nlibrary Trigonometry {\\n\\n    // Table index into the trigonometric table\\n    uint constant INDEX_WIDTH = 8;\\n    // Interpolation between successive entries in the tables\\n    uint constant INTERP_WIDTH = 16;\\n    uint constant INDEX_OFFSET = 28 - INDEX_WIDTH;\\n    uint constant INTERP_OFFSET = INDEX_OFFSET - INTERP_WIDTH;\\n    uint32 constant ANGLES_IN_CYCLE = 1073741824;\\n    uint32 constant QUADRANT_HIGH_MASK = 536870912;\\n    uint32 constant QUADRANT_LOW_MASK = 268435456;\\n    uint constant SINE_TABLE_SIZE = 256;\\n\\n    // constant sine lookup table generated by gen_tables.py\\n    // We have no other choice but this since constant arrays don't yet exist\\n    uint8 constant ENTRY_BYTES = 4;\\n    bytes constant SIN_TABLE = \\\"\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\xc9\\\\x0f\\\\x88\\\\x01\\\\x92\\\\x1d\\\\x20\\\\x02\\\\x5b\\\\x26\\\\xd7\\\\x03\\\\x24\\\\x2a\\\\xbf\\\\x03\\\\xed\\\\x26\\\\xe6\\\\x04\\\\xb6\\\\x19\\\\x5d\\\\x05\\\\x7f\\\\x00\\\\x35\\\\x06\\\\x47\\\\xd9\\\\x7c\\\\x07\\\\x10\\\\xa3\\\\x45\\\\x07\\\\xd9\\\\x5b\\\\x9e\\\\x08\\\\xa2\\\\x00\\\\x9a\\\\x09\\\\x6a\\\\x90\\\\x49\\\\x0a\\\\x33\\\\x08\\\\xbc\\\\x0a\\\\xfb\\\\x68\\\\x05\\\\x0b\\\\xc3\\\\xac\\\\x35\\\\x0c\\\\x8b\\\\xd3\\\\x5e\\\\x0d\\\\x53\\\\xdb\\\\x92\\\\x0e\\\\x1b\\\\xc2\\\\xe4\\\\x0e\\\\xe3\\\\x87\\\\x66\\\\x0f\\\\xab\\\\x27\\\\x2b\\\\x10\\\\x72\\\\xa0\\\\x48\\\\x11\\\\x39\\\\xf0\\\\xcf\\\\x12\\\\x01\\\\x16\\\\xd5\\\\x12\\\\xc8\\\\x10\\\\x6e\\\\x13\\\\x8e\\\\xdb\\\\xb1\\\\x14\\\\x55\\\\x76\\\\xb1\\\\x15\\\\x1b\\\\xdf\\\\x85\\\\x15\\\\xe2\\\\x14\\\\x44\\\\x16\\\\xa8\\\\x13\\\\x05\\\\x17\\\\x6d\\\\xd9\\\\xde\\\\x18\\\\x33\\\\x66\\\\xe8\\\\x18\\\\xf8\\\\xb8\\\\x3c\\\\x19\\\\xbd\\\\xcb\\\\xf3\\\\x1a\\\\x82\\\\xa0\\\\x25\\\\x1b\\\\x47\\\\x32\\\\xef\\\\x1c\\\\x0b\\\\x82\\\\x6a\\\\x1c\\\\xcf\\\\x8c\\\\xb3\\\\x1d\\\\x93\\\\x4f\\\\xe5\\\\x1e\\\\x56\\\\xca\\\\x1e\\\\x1f\\\\x19\\\\xf9\\\\x7b\\\\x1f\\\\xdc\\\\xdc\\\\x1b\\\\x20\\\\x9f\\\\x70\\\\x1c\\\\x21\\\\x61\\\\xb3\\\\x9f\\\\x22\\\\x23\\\\xa4\\\\xc5\\\\x22\\\\xe5\\\\x41\\\\xaf\\\\x23\\\\xa6\\\\x88\\\\x7e\\\\x24\\\\x67\\\\x77\\\\x57\\\\x25\\\\x28\\\\x0c\\\\x5d\\\\x25\\\\xe8\\\\x45\\\\xb6\\\\x26\\\\xa8\\\\x21\\\\x85\\\\x27\\\\x67\\\\x9d\\\\xf4\\\\x28\\\\x26\\\\xb9\\\\x28\\\\x28\\\\xe5\\\\x71\\\\x4a\\\\x29\\\\xa3\\\\xc4\\\\x85\\\\x2a\\\\x61\\\\xb1\\\\x01\\\\x2b\\\\x1f\\\\x34\\\\xeb\\\\x2b\\\\xdc\\\\x4e\\\\x6f\\\\x2c\\\\x98\\\\xfb\\\\xba\\\\x2d\\\\x55\\\\x3a\\\\xfb\\\\x2e\\\\x11\\\\x0a\\\\x62\\\\x2e\\\\xcc\\\\x68\\\\x1e\\\\x2f\\\\x87\\\\x52\\\\x62\\\\x30\\\\x41\\\\xc7\\\\x60\\\\x30\\\\xfb\\\\xc5\\\\x4d\\\\x31\\\\xb5\\\\x4a\\\\x5d\\\\x32\\\\x6e\\\\x54\\\\xc7\\\\x33\\\\x26\\\\xe2\\\\xc2\\\\x33\\\\xde\\\\xf2\\\\x87\\\\x34\\\\x96\\\\x82\\\\x4f\\\\x35\\\\x4d\\\\x90\\\\x56\\\\x36\\\\x04\\\\x1a\\\\xd9\\\\x36\\\\xba\\\\x20\\\\x13\\\\x37\\\\x6f\\\\x9e\\\\x46\\\\x38\\\\x24\\\\x93\\\\xb0\\\\x38\\\\xd8\\\\xfe\\\\x93\\\\x39\\\\x8c\\\\xdd\\\\x32\\\\x3a\\\\x40\\\\x2d\\\\xd1\\\\x3a\\\\xf2\\\\xee\\\\xb7\\\\x3b\\\\xa5\\\\x1e\\\\x29\\\\x3c\\\\x56\\\\xba\\\\x70\\\\x3d\\\\x07\\\\xc1\\\\xd5\\\\x3d\\\\xb8\\\\x32\\\\xa5\\\\x3e\\\\x68\\\\x0b\\\\x2c\\\\x3f\\\\x17\\\\x49\\\\xb7\\\\x3f\\\\xc5\\\\xec\\\\x97\\\\x40\\\\x73\\\\xf2\\\\x1d\\\\x41\\\\x21\\\\x58\\\\x9a\\\\x41\\\\xce\\\\x1e\\\\x64\\\\x42\\\\x7a\\\\x41\\\\xd0\\\\x43\\\\x25\\\\xc1\\\\x35\\\\x43\\\\xd0\\\\x9a\\\\xec\\\\x44\\\\x7a\\\\xcd\\\\x50\\\\x45\\\\x24\\\\x56\\\\xbc\\\\x45\\\\xcd\\\\x35\\\\x8f\\\\x46\\\\x75\\\\x68\\\\x27\\\\x47\\\\x1c\\\\xec\\\\xe6\\\\x47\\\\xc3\\\\xc2\\\\x2e\\\\x48\\\\x69\\\\xe6\\\\x64\\\\x49\\\\x0f\\\\x57\\\\xee\\\\x49\\\\xb4\\\\x15\\\\x33\\\\x4a\\\\x58\\\\x1c\\\\x9d\\\\x4a\\\\xfb\\\\x6c\\\\x97\\\\x4b\\\\x9e\\\\x03\\\\x8f\\\\x4c\\\\x3f\\\\xdf\\\\xf3\\\\x4c\\\\xe1\\\\x00\\\\x34\\\\x4d\\\\x81\\\\x62\\\\xc3\\\\x4e\\\\x21\\\\x06\\\\x17\\\\x4e\\\\xbf\\\\xe8\\\\xa4\\\\x4f\\\\x5e\\\\x08\\\\xe2\\\\x4f\\\\xfb\\\\x65\\\\x4c\\\\x50\\\\x97\\\\xfc\\\\x5e\\\\x51\\\\x33\\\\xcc\\\\x94\\\\x51\\\\xce\\\\xd4\\\\x6e\\\\x52\\\\x69\\\\x12\\\\x6e\\\\x53\\\\x02\\\\x85\\\\x17\\\\x53\\\\x9b\\\\x2a\\\\xef\\\\x54\\\\x33\\\\x02\\\\x7d\\\\x54\\\\xca\\\\x0a\\\\x4a\\\\x55\\\\x60\\\\x40\\\\xe2\\\\x55\\\\xf5\\\\xa4\\\\xd2\\\\x56\\\\x8a\\\\x34\\\\xa9\\\\x57\\\\x1d\\\\xee\\\\xf9\\\\x57\\\\xb0\\\\xd2\\\\x55\\\\x58\\\\x42\\\\xdd\\\\x54\\\\x58\\\\xd4\\\\x0e\\\\x8c\\\\x59\\\\x64\\\\x64\\\\x97\\\\x59\\\\xf3\\\\xde\\\\x12\\\\x5a\\\\x82\\\\x79\\\\x99\\\\x5b\\\\x10\\\\x35\\\\xce\\\\x5b\\\\x9d\\\\x11\\\\x53\\\\x5c\\\\x29\\\\x0a\\\\xcc\\\\x5c\\\\xb4\\\\x20\\\\xdf\\\\x5d\\\\x3e\\\\x52\\\\x36\\\\x5d\\\\xc7\\\\x9d\\\\x7b\\\\x5e\\\\x50\\\\x01\\\\x5d\\\\x5e\\\\xd7\\\\x7c\\\\x89\\\\x5f\\\\x5e\\\\x0d\\\\xb2\\\\x5f\\\\xe3\\\\xb3\\\\x8d\\\\x60\\\\x68\\\\x6c\\\\xce\\\\x60\\\\xec\\\\x38\\\\x2f\\\\x61\\\\x6f\\\\x14\\\\x6b\\\\x61\\\\xf1\\\\x00\\\\x3e\\\\x62\\\\x71\\\\xfa\\\\x68\\\\x62\\\\xf2\\\\x01\\\\xac\\\\x63\\\\x71\\\\x14\\\\xcc\\\\x63\\\\xef\\\\x32\\\\x8f\\\\x64\\\\x6c\\\\x59\\\\xbf\\\\x64\\\\xe8\\\\x89\\\\x25\\\\x65\\\\x63\\\\xbf\\\\x91\\\\x65\\\\xdd\\\\xfb\\\\xd2\\\\x66\\\\x57\\\\x3c\\\\xbb\\\\x66\\\\xcf\\\\x81\\\\x1f\\\\x67\\\\x46\\\\xc7\\\\xd7\\\\x67\\\\xbd\\\\x0f\\\\xbc\\\\x68\\\\x32\\\\x57\\\\xaa\\\\x68\\\\xa6\\\\x9e\\\\x80\\\\x69\\\\x19\\\\xe3\\\\x1f\\\\x69\\\\x8c\\\\x24\\\\x6b\\\\x69\\\\xfd\\\\x61\\\\x4a\\\\x6a\\\\x6d\\\\x98\\\\xa3\\\\x6a\\\\xdc\\\\xc9\\\\x64\\\\x6b\\\\x4a\\\\xf2\\\\x78\\\\x6b\\\\xb8\\\\x12\\\\xd0\\\\x6c\\\\x24\\\\x29\\\\x5f\\\\x6c\\\\x8f\\\\x35\\\\x1b\\\\x6c\\\\xf9\\\\x34\\\\xfb\\\\x6d\\\\x62\\\\x27\\\\xf9\\\\x6d\\\\xca\\\\x0d\\\\x14\\\\x6e\\\\x30\\\\xe3\\\\x49\\\\x6e\\\\x96\\\\xa9\\\\x9c\\\\x6e\\\\xfb\\\\x5f\\\\x11\\\\x6f\\\\x5f\\\\x02\\\\xb1\\\\x6f\\\\xc1\\\\x93\\\\x84\\\\x70\\\\x23\\\\x10\\\\x99\\\\x70\\\\x83\\\\x78\\\\xfe\\\\x70\\\\xe2\\\\xcb\\\\xc5\\\\x71\\\\x41\\\\x08\\\\x04\\\\x71\\\\x9e\\\\x2c\\\\xd1\\\\x71\\\\xfa\\\\x39\\\\x48\\\\x72\\\\x55\\\\x2c\\\\x84\\\\x72\\\\xaf\\\\x05\\\\xa6\\\\x73\\\\x07\\\\xc3\\\\xcf\\\\x73\\\\x5f\\\\x66\\\\x25\\\\x73\\\\xb5\\\\xeb\\\\xd0\\\\x74\\\\x0b\\\\x53\\\\xfa\\\\x74\\\\x5f\\\\x9d\\\\xd0\\\\x74\\\\xb2\\\\xc8\\\\x83\\\\x75\\\\x04\\\\xd3\\\\x44\\\\x75\\\\x55\\\\xbd\\\\x4b\\\\x75\\\\xa5\\\\x85\\\\xce\\\\x75\\\\xf4\\\\x2c\\\\x0a\\\\x76\\\\x41\\\\xaf\\\\x3c\\\\x76\\\\x8e\\\\x0e\\\\xa5\\\\x76\\\\xd9\\\\x49\\\\x88\\\\x77\\\\x23\\\\x5f\\\\x2c\\\\x77\\\\x6c\\\\x4e\\\\xda\\\\x77\\\\xb4\\\\x17\\\\xdf\\\\x77\\\\xfa\\\\xb9\\\\x88\\\\x78\\\\x40\\\\x33\\\\x28\\\\x78\\\\x84\\\\x84\\\\x13\\\\x78\\\\xc7\\\\xab\\\\xa1\\\\x79\\\\x09\\\\xa9\\\\x2c\\\\x79\\\\x4a\\\\x7c\\\\x11\\\\x79\\\\x8a\\\\x23\\\\xb0\\\\x79\\\\xc8\\\\x9f\\\\x6d\\\\x7a\\\\x05\\\\xee\\\\xac\\\\x7a\\\\x42\\\\x10\\\\xd8\\\\x7a\\\\x7d\\\\x05\\\\x5a\\\\x7a\\\\xb6\\\\xcb\\\\xa3\\\\x7a\\\\xef\\\\x63\\\\x23\\\\x7b\\\\x26\\\\xcb\\\\x4e\\\\x7b\\\\x5d\\\\x03\\\\x9d\\\\x7b\\\\x92\\\\x0b\\\\x88\\\\x7b\\\\xc5\\\\xe2\\\\x8f\\\\x7b\\\\xf8\\\\x88\\\\x2f\\\\x7c\\\\x29\\\\xfb\\\\xed\\\\x7c\\\\x5a\\\\x3d\\\\x4f\\\\x7c\\\\x89\\\\x4b\\\\xdd\\\\x7c\\\\xb7\\\\x27\\\\x23\\\\x7c\\\\xe3\\\\xce\\\\xb1\\\\x7d\\\\x0f\\\\x42\\\\x17\\\\x7d\\\\x39\\\\x80\\\\xeb\\\\x7d\\\\x62\\\\x8a\\\\xc5\\\\x7d\\\\x8a\\\\x5f\\\\x3f\\\\x7d\\\\xb0\\\\xfd\\\\xf7\\\\x7d\\\\xd6\\\\x66\\\\x8e\\\\x7d\\\\xfa\\\\x98\\\\xa7\\\\x7e\\\\x1d\\\\x93\\\\xe9\\\\x7e\\\\x3f\\\\x57\\\\xfe\\\\x7e\\\\x5f\\\\xe4\\\\x92\\\\x7e\\\\x7f\\\\x39\\\\x56\\\\x7e\\\\x9d\\\\x55\\\\xfb\\\\x7e\\\\xba\\\\x3a\\\\x38\\\\x7e\\\\xd5\\\\xe5\\\\xc5\\\\x7e\\\\xf0\\\\x58\\\\x5f\\\\x7f\\\\x09\\\\x91\\\\xc3\\\\x7f\\\\x21\\\\x91\\\\xb3\\\\x7f\\\\x38\\\\x57\\\\xf5\\\\x7f\\\\x4d\\\\xe4\\\\x50\\\\x7f\\\\x62\\\\x36\\\\x8e\\\\x7f\\\\x75\\\\x4e\\\\x7f\\\\x7f\\\\x87\\\\x2b\\\\xf2\\\\x7f\\\\x97\\\\xce\\\\xbc\\\\x7f\\\\xa7\\\\x36\\\\xb3\\\\x7f\\\\xb5\\\\x63\\\\xb2\\\\x7f\\\\xc2\\\\x55\\\\x95\\\\x7f\\\\xce\\\\x0c\\\\x3d\\\\x7f\\\\xd8\\\\x87\\\\x8d\\\\x7f\\\\xe1\\\\xc7\\\\x6a\\\\x7f\\\\xe9\\\\xcb\\\\xbf\\\\x7f\\\\xf0\\\\x94\\\\x77\\\\x7f\\\\xf6\\\\x21\\\\x81\\\\x7f\\\\xfa\\\\x72\\\\xd0\\\\x7f\\\\xfd\\\\x88\\\\x59\\\\x7f\\\\xff\\\\x62\\\\x15\\\\x7f\\\\xff\\\\xff\\\\xff\\\";\\n    /**\\n     * Convenience function to apply a mask on an integer to extract a certain\\n     * number of bits. Using exponents since solidity still does not support\\n     * shifting.\\n     *\\n     * @param _value The integer whose bits we want to get\\n     * @param _width The width of the bits (in bits) we want to extract\\n     * @param _offset The offset of the bits (in bits) we want to extract\\n     * @return An integer containing _width bits of _value starting at the\\n     *         _offset bit\\n     */\\n    function bits(uint _value, uint _width, uint _offset) pure internal returns (uint) {\\n        return (_value / (2 ** _offset)) & (((2 ** _width)) - 1);\\n    }\\n\\n    function sinTableLookup(uint index) pure internal returns (uint32) {\\n        bytes memory table = SIN_TABLE;\\n        uint offset = (index + 1) * ENTRY_BYTES;\\n        uint32 trigint_value;\\n        assembly {\\n            trigint_value := mload(add(table, offset))\\n        }\\n\\n        return trigint_value;\\n    }\\n\\n    /**\\n     * Return the sine of an integer approximated angle as a signed 16-bit\\n     * integer.\\n     *\\n     * @param _angle A 30-bit angle. This divides the circle into 1073741824\\n     *     angle units, instead of the standard 360 degrees.\\n     * @return The sine result as a number in the range -2147483647 to 2147483647.\\n     */\\n    function sin(uint256 _angle) public pure returns (int) {\\n        uint interp = bits(_angle, INTERP_WIDTH, INTERP_OFFSET);\\n        uint index = bits(_angle, INDEX_WIDTH, INDEX_OFFSET);\\n\\n        bool is_odd_quadrant = (_angle & QUADRANT_LOW_MASK) == 0;\\n        bool is_negative_quadrant = (_angle & QUADRANT_HIGH_MASK) != 0;\\n\\n        if (!is_odd_quadrant) {\\n            index = SINE_TABLE_SIZE - 1 - index;\\n        }\\n\\n        uint x1 = sinTableLookup(index);\\n        uint x2 = sinTableLookup(index + 1);\\n        uint approximation = ((x2 - x1) * interp) / (2 ** INTERP_WIDTH);\\n\\n        int sine;\\n        if (is_odd_quadrant) {\\n            sine = int(x1) + int(approximation);\\n        } else {\\n            sine = int(x2) - int(approximation);\\n        }\\n\\n        if (is_negative_quadrant) {\\n            sine *= -1;\\n        }\\n\\n        return sine;\\n    }\\n}\\n\",\"keccak256\":\"0x286c23e8badf3201fbbd1b1f78958aa780bb815b6388cd004509ed9e81b3b7f7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6112b6610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c806323b2230514610050578063d818e7c414610080578063defe2c1c146100b0575b600080fd5b61006a60048036038101906100659190610ae1565b6100e0565b6040516100779190610b43565b60405180910390f35b61009a60048036038101906100959190610b5e565b610140565b6040516100a79190610bc2565b60405180910390f35b6100ca60048036038101906100c59190610bdd565b61026b565b6040516100d79190610b43565b60405180910390f35b6000806000905060005b83518110156101365761011684828151811061010957610108610c26565b5b602002602001015161026b565b826101219190610c84565b9150808061012e90610cda565b9150506100ea565b5080915050919050565b6000808251905060028111156102605760008360008151811061016657610165610c26565b5b602002602001015160006002811061018157610180610c26565b5b6020020151905060008460008151811061019e5761019d610c26565b5b60200260200101516001600281106101b9576101b8610c26565b5b602002015190506000856001856101d09190610d22565b815181106101e1576101e0610c26565b5b60200260200101516000600281106101fc576101fb610c26565b5b602002015190506000866001866102139190610d22565b8151811061022457610223610c26565b5b602002602001015160016002811061023f5761023e610c26565b5b60200201519050818414801561025457508083145b95505050505050610266565b60009150505b919050565b60008060009050600083511115610312576102a86102a38460008151811061029657610295610c26565b5b602002602001015161031b565b610578565b816102b39190610d56565b90506000600190505b8351811015610310576102f06102eb8583815181106102de576102dd610c26565b5b602002602001015161031b565b610578565b826102fb9190610dea565b9150808061030890610cda565b9150506102bc565b505b80915050919050565b60008061032783610140565b9050600115158115151461033a57600080fd5b6000835190506103486106a9565b6103506106a9565b6103586106a9565b6000806000806000905060028811156105675760005b88811015610508576002896103839190610d22565b81036103b0576002896103969190610d22565b94506001896103a59190610d22565b935060009250610402565b6001896103bd9190610d22565b81036103df576001896103d09190610d22565b94506000935060019250610401565b8094506001816103ef9190610c84565b93506002816103fe9190610c84565b92505b5b8b858151811061041557610414610c26565b5b602002602001015197508b848151811061043257610431610c26565b5b602002602001015196508b838151811061044f5761044e610c26565b5b60200260200101519550600061047c8760006002811061047257610471610c26565b5b602002015161059a565b905060006104a18a60006002811061049757610496610c26565b5b602002015161059a565b905060006104c68a6001600281106104bc576104bb610c26565b5b60200201516105ce565b905060008183856104d79190610dea565b6104e19190610e7e565b905080866104ef9190610d56565b955050505050808061050090610cda565b91505061036e565b50633b9aca0080633b9aca008060026105219190610e7e565b61052b9190610e7e565b6105359190610e7e565b61053f9190610e7e565b6002626136c061054f91906110f1565b8261055a9190610e7e565b610564919061118c565b90505b809950505050505050505050919050565b600080821215610591578161058c906111f6565b610593565b815b9050919050565b600060b4633b9aca0063bb40e64d846105b39190610e7e565b6105bd9190610e7e565b6105c7919061118c565b9050919050565b600080634000000090506000637fffffff90506000633b9aca006101686105f59190610e7e565b83866106019190610e7e565b61060b919061118c565b905081633b9aca00735c82AEeaB2DCADB3aA6F8AD9318C1A3940B13bac63cb5cc109846040518263ffffffff1660e01b815260040161064a9190610b43565b602060405180830381865af4158015610667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068b9190611253565b6106959190610e7e565b61069f919061118c565b9350505050919050565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61072d826106e4565b810181811067ffffffffffffffff8211171561074c5761074b6106f5565b5b80604052505050565b600061075f6106cb565b905061076b8282610724565b919050565b600067ffffffffffffffff82111561078b5761078a6106f5565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff8211156107bc576107bb6106f5565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156107e8576107e76106f5565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610814576108136106f5565b5b602082029050919050565b6000819050919050565b6108328161081f565b811461083d57600080fd5b50565b60008135905061084f81610829565b92915050565b6000610868610863846107f9565b610755565b905080602084028301858111156108825761088161079c565b5b835b818110156108ab57806108978882610840565b845260208401935050602081019050610884565b5050509392505050565b600082601f8301126108ca576108c96106df565b5b60026108d7848285610855565b91505092915050565b60006108f36108ee846107cd565b610755565b905080838252602082019050604084028301858111156109165761091561079c565b5b835b8181101561093f578061092b88826108b5565b845260208401935050604081019050610918565b5050509392505050565b600082601f83011261095e5761095d6106df565b5b813561096e8482602086016108e0565b91505092915050565b600061098a610985846107a1565b610755565b905080838252602082019050602084028301858111156109ad576109ac61079c565b5b835b818110156109f457803567ffffffffffffffff8111156109d2576109d16106df565b5b8086016109df8982610949565b855260208501945050506020810190506109af565b5050509392505050565b600082601f830112610a1357610a126106df565b5b8135610a23848260208601610977565b91505092915050565b6000610a3f610a3a84610770565b610755565b90508083825260208201905060208402830185811115610a6257610a6161079c565b5b835b81811015610aa957803567ffffffffffffffff811115610a8757610a866106df565b5b808601610a9489826109fe565b85526020850194505050602081019050610a64565b5050509392505050565b600082601f830112610ac857610ac76106df565b5b8135610ad8848260208601610a2c565b91505092915050565b600060208284031215610af757610af66106d5565b5b600082013567ffffffffffffffff811115610b1557610b146106da565b5b610b2184828501610ab3565b91505092915050565b6000819050919050565b610b3d81610b2a565b82525050565b6000602082019050610b586000830184610b34565b92915050565b600060208284031215610b7457610b736106d5565b5b600082013567ffffffffffffffff811115610b9257610b916106da565b5b610b9e84828501610949565b91505092915050565b60008115159050919050565b610bbc81610ba7565b82525050565b6000602082019050610bd76000830184610bb3565b92915050565b600060208284031215610bf357610bf26106d5565b5b600082013567ffffffffffffffff811115610c1157610c106106da565b5b610c1d848285016109fe565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c8f82610b2a565b9150610c9a83610b2a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ccf57610cce610c55565b5b828201905092915050565b6000610ce582610b2a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d1757610d16610c55565b5b600182019050919050565b6000610d2d82610b2a565b9150610d3883610b2a565b925082821015610d4b57610d4a610c55565b5b828203905092915050565b6000610d618261081f565b9150610d6c8361081f565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615610da757610da6610c55565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615610ddf57610dde610c55565b5b828201905092915050565b6000610df58261081f565b9150610e008361081f565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615610e3b57610e3a610c55565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615610e7357610e72610c55565b5b828203905092915050565b6000610e898261081f565b9150610e948361081f565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610ed357610ed2610c55565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610f1057610f0f610c55565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610f4d57610f4c610c55565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610f8a57610f89610c55565b5b828202905092915050565b60008160011c9050919050565b6000808291508390505b6001851115610fec57808604811115610fc857610fc7610c55565b5b6001851615610fd75780820291505b8081029050610fe585610f95565b9450610fac565b94509492505050565b6000826000811461100d576001811461101757611020565b60019150506110dc565b829150506110dc565b508161102f57600090506110dc565b60019050600082136001811461104c576000811461106457611078565b82860483111561105f5761105e610c55565b5b611078565b82860583121561107757611076610c55565b5b5b506001831615611086578190505b818202915061109483610f95565b92506110a285848484610fa2565b9250905081850481116000821316156110be576110bd610c55565b5b81840581126000821216156110d6576110d5610c55565b5b81810290505b949350505050565b600060ff82169050919050565b60006110fc8261081f565b9150611107836110e4565b92506111557f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f80000000000000000000000000000000000000000000000000000000000000008585610ff5565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006111978261081f565b91506111a28361081f565b9250826111b2576111b161115d565b5b600160000383147f8000000000000000000000000000000000000000000000000000000000000000831416156111eb576111ea610c55565b5b828205905092915050565b60006112018261081f565b91507f8000000000000000000000000000000000000000000000000000000000000000820361123357611232610c55565b5b816000039050919050565b60008151905061124d81610829565b92915050565b600060208284031215611269576112686106d5565b5b60006112778482850161123e565b9150509291505056fea2646970667358221220c513fdaca3ec80cd279469a962b6c121c94c540de08169a3ffb94ae91985cbdc64736f6c634300080d0033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c806323b2230514610050578063d818e7c414610080578063defe2c1c146100b0575b600080fd5b61006a60048036038101906100659190610ae1565b6100e0565b6040516100779190610b43565b60405180910390f35b61009a60048036038101906100959190610b5e565b610140565b6040516100a79190610bc2565b60405180910390f35b6100ca60048036038101906100c59190610bdd565b61026b565b6040516100d79190610b43565b60405180910390f35b6000806000905060005b83518110156101365761011684828151811061010957610108610c26565b5b602002602001015161026b565b826101219190610c84565b9150808061012e90610cda565b9150506100ea565b5080915050919050565b6000808251905060028111156102605760008360008151811061016657610165610c26565b5b602002602001015160006002811061018157610180610c26565b5b6020020151905060008460008151811061019e5761019d610c26565b5b60200260200101516001600281106101b9576101b8610c26565b5b602002015190506000856001856101d09190610d22565b815181106101e1576101e0610c26565b5b60200260200101516000600281106101fc576101fb610c26565b5b602002015190506000866001866102139190610d22565b8151811061022457610223610c26565b5b602002602001015160016002811061023f5761023e610c26565b5b60200201519050818414801561025457508083145b95505050505050610266565b60009150505b919050565b60008060009050600083511115610312576102a86102a38460008151811061029657610295610c26565b5b602002602001015161031b565b610578565b816102b39190610d56565b90506000600190505b8351811015610310576102f06102eb8583815181106102de576102dd610c26565b5b602002602001015161031b565b610578565b826102fb9190610dea565b9150808061030890610cda565b9150506102bc565b505b80915050919050565b60008061032783610140565b9050600115158115151461033a57600080fd5b6000835190506103486106a9565b6103506106a9565b6103586106a9565b6000806000806000905060028811156105675760005b88811015610508576002896103839190610d22565b81036103b0576002896103969190610d22565b94506001896103a59190610d22565b935060009250610402565b6001896103bd9190610d22565b81036103df576001896103d09190610d22565b94506000935060019250610401565b8094506001816103ef9190610c84565b93506002816103fe9190610c84565b92505b5b8b858151811061041557610414610c26565b5b602002602001015197508b848151811061043257610431610c26565b5b602002602001015196508b838151811061044f5761044e610c26565b5b60200260200101519550600061047c8760006002811061047257610471610c26565b5b602002015161059a565b905060006104a18a60006002811061049757610496610c26565b5b602002015161059a565b905060006104c68a6001600281106104bc576104bb610c26565b5b60200201516105ce565b905060008183856104d79190610dea565b6104e19190610e7e565b905080866104ef9190610d56565b955050505050808061050090610cda565b91505061036e565b50633b9aca0080633b9aca008060026105219190610e7e565b61052b9190610e7e565b6105359190610e7e565b61053f9190610e7e565b6002626136c061054f91906110f1565b8261055a9190610e7e565b610564919061118c565b90505b809950505050505050505050919050565b600080821215610591578161058c906111f6565b610593565b815b9050919050565b600060b4633b9aca0063bb40e64d846105b39190610e7e565b6105bd9190610e7e565b6105c7919061118c565b9050919050565b600080634000000090506000637fffffff90506000633b9aca006101686105f59190610e7e565b83866106019190610e7e565b61060b919061118c565b905081633b9aca0073__$ace459064953959b6034b32bdfe6b7b52f$__63cb5cc109846040518263ffffffff1660e01b815260040161064a9190610b43565b602060405180830381865af4158015610667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068b9190611253565b6106959190610e7e565b61069f919061118c565b9350505050919050565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61072d826106e4565b810181811067ffffffffffffffff8211171561074c5761074b6106f5565b5b80604052505050565b600061075f6106cb565b905061076b8282610724565b919050565b600067ffffffffffffffff82111561078b5761078a6106f5565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff8211156107bc576107bb6106f5565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156107e8576107e76106f5565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610814576108136106f5565b5b602082029050919050565b6000819050919050565b6108328161081f565b811461083d57600080fd5b50565b60008135905061084f81610829565b92915050565b6000610868610863846107f9565b610755565b905080602084028301858111156108825761088161079c565b5b835b818110156108ab57806108978882610840565b845260208401935050602081019050610884565b5050509392505050565b600082601f8301126108ca576108c96106df565b5b60026108d7848285610855565b91505092915050565b60006108f36108ee846107cd565b610755565b905080838252602082019050604084028301858111156109165761091561079c565b5b835b8181101561093f578061092b88826108b5565b845260208401935050604081019050610918565b5050509392505050565b600082601f83011261095e5761095d6106df565b5b813561096e8482602086016108e0565b91505092915050565b600061098a610985846107a1565b610755565b905080838252602082019050602084028301858111156109ad576109ac61079c565b5b835b818110156109f457803567ffffffffffffffff8111156109d2576109d16106df565b5b8086016109df8982610949565b855260208501945050506020810190506109af565b5050509392505050565b600082601f830112610a1357610a126106df565b5b8135610a23848260208601610977565b91505092915050565b6000610a3f610a3a84610770565b610755565b90508083825260208201905060208402830185811115610a6257610a6161079c565b5b835b81811015610aa957803567ffffffffffffffff811115610a8757610a866106df565b5b808601610a9489826109fe565b85526020850194505050602081019050610a64565b5050509392505050565b600082601f830112610ac857610ac76106df565b5b8135610ad8848260208601610a2c565b91505092915050565b600060208284031215610af757610af66106d5565b5b600082013567ffffffffffffffff811115610b1557610b146106da565b5b610b2184828501610ab3565b91505092915050565b6000819050919050565b610b3d81610b2a565b82525050565b6000602082019050610b586000830184610b34565b92915050565b600060208284031215610b7457610b736106d5565b5b600082013567ffffffffffffffff811115610b9257610b916106da565b5b610b9e84828501610949565b91505092915050565b60008115159050919050565b610bbc81610ba7565b82525050565b6000602082019050610bd76000830184610bb3565b92915050565b600060208284031215610bf357610bf26106d5565b5b600082013567ffffffffffffffff811115610c1157610c106106da565b5b610c1d848285016109fe565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c8f82610b2a565b9150610c9a83610b2a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ccf57610cce610c55565b5b828201905092915050565b6000610ce582610b2a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d1757610d16610c55565b5b600182019050919050565b6000610d2d82610b2a565b9150610d3883610b2a565b925082821015610d4b57610d4a610c55565b5b828203905092915050565b6000610d618261081f565b9150610d6c8361081f565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615610da757610da6610c55565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615610ddf57610dde610c55565b5b828201905092915050565b6000610df58261081f565b9150610e008361081f565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615610e3b57610e3a610c55565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615610e7357610e72610c55565b5b828203905092915050565b6000610e898261081f565b9150610e948361081f565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610ed357610ed2610c55565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610f1057610f0f610c55565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610f4d57610f4c610c55565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610f8a57610f89610c55565b5b828202905092915050565b60008160011c9050919050565b6000808291508390505b6001851115610fec57808604811115610fc857610fc7610c55565b5b6001851615610fd75780820291505b8081029050610fe585610f95565b9450610fac565b94509492505050565b6000826000811461100d576001811461101757611020565b60019150506110dc565b829150506110dc565b508161102f57600090506110dc565b60019050600082136001811461104c576000811461106457611078565b82860483111561105f5761105e610c55565b5b611078565b82860583121561107757611076610c55565b5b5b506001831615611086578190505b818202915061109483610f95565b92506110a285848484610fa2565b9250905081850481116000821316156110be576110bd610c55565b5b81840581126000821216156110d6576110d5610c55565b5b81810290505b949350505050565b600060ff82169050919050565b60006110fc8261081f565b9150611107836110e4565b92506111557f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f80000000000000000000000000000000000000000000000000000000000000008585610ff5565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006111978261081f565b91506111a28361081f565b9250826111b2576111b161115d565b5b600160000383147f8000000000000000000000000000000000000000000000000000000000000000831416156111eb576111ea610c55565b5b828205905092915050565b60006112018261081f565b91507f8000000000000000000000000000000000000000000000000000000000000000820361123357611232610c55565b5b816000039050919050565b60008151905061124d81610829565b92915050565b600060208284031215611269576112686106d5565b5b60006112778482850161123e565b9150509291505056fea2646970667358221220c513fdaca3ec80cd279469a962b6c121c94c540de08169a3ffb94ae91985cbdc64736f6c634300080d0033",
  "libraries": {
    "Trigonometry": "0x5c82AEeaB2DCADB3aA6F8AD9318C1A3940B13bac"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "isPolygon(int256[2][])": {
        "params": {
          "_coordinates": "Polygon ring"
        },
        "returns": {
          "_0": "Boolean whether the coordinates represents a closed polygon or not"
        }
      },
      "multiPolygonArea(int256[2][][][])": {
        "params": {
          "_coordinates": "Big Number integer coordinates of a multi polygon"
        },
        "returns": {
          "_0": "Area measured in square meters"
        }
      },
      "polygonArea(int256[2][][])": {
        "params": {
          "_coordinates": "Big Number integer coordinates of a single polygon - an array of rings"
        },
        "returns": {
          "_0": "Area measured in square meters"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isPolygon(int256[2][])": {
        "notice": "Checks to make sure first and last coordinates are the same"
      },
      "multiPolygonArea(int256[2][][][])": {
        "notice": "Calculate the area of a multi polygon coordinates"
      },
      "polygonArea(int256[2][][])": {
        "notice": "Calculate the area of a single polygon coordinates"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}