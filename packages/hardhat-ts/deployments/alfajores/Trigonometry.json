{
  "address": "0x5c82AEeaB2DCADB3aA6F8AD9318C1A3940B13bac",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_angle",
          "type": "uint256"
        }
      ],
      "name": "sin",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xb970cc53e7eddee28bbff9fc609fcfacc84657bf3b36c05ac2e9059b3a1bb74e",
  "receipt": {
    "to": null,
    "from": "0xf73d7f5A890a131f12E4fB03E50277c49748Cf5E",
    "contractAddress": "0x5c82AEeaB2DCADB3aA6F8AD9318C1A3940B13bac",
    "transactionIndex": 2,
    "gasUsed": "736131",
    "logsBloom": "0x
    "blockHash": "0xa45249cbc852107f8684dec227d4c81673cff7ddaa77c4f99881552140aae5ec",
    "transactionHash": "0xb970cc53e7eddee28bbff9fc609fcfacc84657bf3b36c05ac2e9059b3a1bb74e",
    "logs": [],
    "blockNumber": 13097979,
    "cumulativeGasUsed": "829029",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "68426a560eaecbef1f3ea51cb3cb6807",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_angle\",\"type\":\"uint256\"}],\"name\":\"sin\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Daniel Serrano\",\"kind\":\"dev\",\"methods\":{\"sin(uint256)\":{\"params\":{\"_angle\":\"A 30-bit angle. This divides the circle into 1073741824     angle units, instead of the standard 360 degrees.\"},\"returns\":{\"_0\":\"The sine result as a number in the range -2147483647 to 2147483647.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"sin(uint256)\":{\"notice\":\"Return the sine of an integer approximated angle as a signed 16-bit integer.\"}},\"notice\":\"SPDX-Licenses-Identifier: MIT Basic trigonometry functions Based on the Trigonometry Library by Lefteris Karapetsas: https://github.com/Sikorkaio/sikorka/blob/master/contracts/trigonometry.sol  This version implements a 32-bit lookup tables instead of a 16-bit. This allows accurate topological operations on small areas with very close coordinates.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/Trigonometry.sol\":\"Trigonometry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/Trigonometry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n/**\\n * SPDX-Licenses-Identifier: MIT\\n * Basic trigonometry functions\\n *\\n * Based on the Trigonometry Library by Lefteris Karapetsas:\\n * https://github.com/Sikorkaio/sikorka/blob/master/contracts/trigonometry.sol\\n * \\n * This version implements a 32-bit lookup tables instead of a 16-bit. This\\n * allows accurate topological operations on small areas with very close coordinates.\\n *\\n * @author Daniel Serrano\\n */\\n\\nlibrary Trigonometry {\\n\\n    // Table index into the trigonometric table\\n    uint constant INDEX_WIDTH = 8;\\n    // Interpolation between successive entries in the tables\\n    uint constant INTERP_WIDTH = 16;\\n    uint constant INDEX_OFFSET = 28 - INDEX_WIDTH;\\n    uint constant INTERP_OFFSET = INDEX_OFFSET - INTERP_WIDTH;\\n    uint32 constant ANGLES_IN_CYCLE = 1073741824;\\n    uint32 constant QUADRANT_HIGH_MASK = 536870912;\\n    uint32 constant QUADRANT_LOW_MASK = 268435456;\\n    uint constant SINE_TABLE_SIZE = 256;\\n\\n    // constant sine lookup table generated by gen_tables.py\\n    // We have no other choice but this since constant arrays don't yet exist\\n    uint8 constant ENTRY_BYTES = 4;\\n    bytes constant SIN_TABLE = \\\"\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\xc9\\\\x0f\\\\x88\\\\x01\\\\x92\\\\x1d\\\\x20\\\\x02\\\\x5b\\\\x26\\\\xd7\\\\x03\\\\x24\\\\x2a\\\\xbf\\\\x03\\\\xed\\\\x26\\\\xe6\\\\x04\\\\xb6\\\\x19\\\\x5d\\\\x05\\\\x7f\\\\x00\\\\x35\\\\x06\\\\x47\\\\xd9\\\\x7c\\\\x07\\\\x10\\\\xa3\\\\x45\\\\x07\\\\xd9\\\\x5b\\\\x9e\\\\x08\\\\xa2\\\\x00\\\\x9a\\\\x09\\\\x6a\\\\x90\\\\x49\\\\x0a\\\\x33\\\\x08\\\\xbc\\\\x0a\\\\xfb\\\\x68\\\\x05\\\\x0b\\\\xc3\\\\xac\\\\x35\\\\x0c\\\\x8b\\\\xd3\\\\x5e\\\\x0d\\\\x53\\\\xdb\\\\x92\\\\x0e\\\\x1b\\\\xc2\\\\xe4\\\\x0e\\\\xe3\\\\x87\\\\x66\\\\x0f\\\\xab\\\\x27\\\\x2b\\\\x10\\\\x72\\\\xa0\\\\x48\\\\x11\\\\x39\\\\xf0\\\\xcf\\\\x12\\\\x01\\\\x16\\\\xd5\\\\x12\\\\xc8\\\\x10\\\\x6e\\\\x13\\\\x8e\\\\xdb\\\\xb1\\\\x14\\\\x55\\\\x76\\\\xb1\\\\x15\\\\x1b\\\\xdf\\\\x85\\\\x15\\\\xe2\\\\x14\\\\x44\\\\x16\\\\xa8\\\\x13\\\\x05\\\\x17\\\\x6d\\\\xd9\\\\xde\\\\x18\\\\x33\\\\x66\\\\xe8\\\\x18\\\\xf8\\\\xb8\\\\x3c\\\\x19\\\\xbd\\\\xcb\\\\xf3\\\\x1a\\\\x82\\\\xa0\\\\x25\\\\x1b\\\\x47\\\\x32\\\\xef\\\\x1c\\\\x0b\\\\x82\\\\x6a\\\\x1c\\\\xcf\\\\x8c\\\\xb3\\\\x1d\\\\x93\\\\x4f\\\\xe5\\\\x1e\\\\x56\\\\xca\\\\x1e\\\\x1f\\\\x19\\\\xf9\\\\x7b\\\\x1f\\\\xdc\\\\xdc\\\\x1b\\\\x20\\\\x9f\\\\x70\\\\x1c\\\\x21\\\\x61\\\\xb3\\\\x9f\\\\x22\\\\x23\\\\xa4\\\\xc5\\\\x22\\\\xe5\\\\x41\\\\xaf\\\\x23\\\\xa6\\\\x88\\\\x7e\\\\x24\\\\x67\\\\x77\\\\x57\\\\x25\\\\x28\\\\x0c\\\\x5d\\\\x25\\\\xe8\\\\x45\\\\xb6\\\\x26\\\\xa8\\\\x21\\\\x85\\\\x27\\\\x67\\\\x9d\\\\xf4\\\\x28\\\\x26\\\\xb9\\\\x28\\\\x28\\\\xe5\\\\x71\\\\x4a\\\\x29\\\\xa3\\\\xc4\\\\x85\\\\x2a\\\\x61\\\\xb1\\\\x01\\\\x2b\\\\x1f\\\\x34\\\\xeb\\\\x2b\\\\xdc\\\\x4e\\\\x6f\\\\x2c\\\\x98\\\\xfb\\\\xba\\\\x2d\\\\x55\\\\x3a\\\\xfb\\\\x2e\\\\x11\\\\x0a\\\\x62\\\\x2e\\\\xcc\\\\x68\\\\x1e\\\\x2f\\\\x87\\\\x52\\\\x62\\\\x30\\\\x41\\\\xc7\\\\x60\\\\x30\\\\xfb\\\\xc5\\\\x4d\\\\x31\\\\xb5\\\\x4a\\\\x5d\\\\x32\\\\x6e\\\\x54\\\\xc7\\\\x33\\\\x26\\\\xe2\\\\xc2\\\\x33\\\\xde\\\\xf2\\\\x87\\\\x34\\\\x96\\\\x82\\\\x4f\\\\x35\\\\x4d\\\\x90\\\\x56\\\\x36\\\\x04\\\\x1a\\\\xd9\\\\x36\\\\xba\\\\x20\\\\x13\\\\x37\\\\x6f\\\\x9e\\\\x46\\\\x38\\\\x24\\\\x93\\\\xb0\\\\x38\\\\xd8\\\\xfe\\\\x93\\\\x39\\\\x8c\\\\xdd\\\\x32\\\\x3a\\\\x40\\\\x2d\\\\xd1\\\\x3a\\\\xf2\\\\xee\\\\xb7\\\\x3b\\\\xa5\\\\x1e\\\\x29\\\\x3c\\\\x56\\\\xba\\\\x70\\\\x3d\\\\x07\\\\xc1\\\\xd5\\\\x3d\\\\xb8\\\\x32\\\\xa5\\\\x3e\\\\x68\\\\x0b\\\\x2c\\\\x3f\\\\x17\\\\x49\\\\xb7\\\\x3f\\\\xc5\\\\xec\\\\x97\\\\x40\\\\x73\\\\xf2\\\\x1d\\\\x41\\\\x21\\\\x58\\\\x9a\\\\x41\\\\xce\\\\x1e\\\\x64\\\\x42\\\\x7a\\\\x41\\\\xd0\\\\x43\\\\x25\\\\xc1\\\\x35\\\\x43\\\\xd0\\\\x9a\\\\xec\\\\x44\\\\x7a\\\\xcd\\\\x50\\\\x45\\\\x24\\\\x56\\\\xbc\\\\x45\\\\xcd\\\\x35\\\\x8f\\\\x46\\\\x75\\\\x68\\\\x27\\\\x47\\\\x1c\\\\xec\\\\xe6\\\\x47\\\\xc3\\\\xc2\\\\x2e\\\\x48\\\\x69\\\\xe6\\\\x64\\\\x49\\\\x0f\\\\x57\\\\xee\\\\x49\\\\xb4\\\\x15\\\\x33\\\\x4a\\\\x58\\\\x1c\\\\x9d\\\\x4a\\\\xfb\\\\x6c\\\\x97\\\\x4b\\\\x9e\\\\x03\\\\x8f\\\\x4c\\\\x3f\\\\xdf\\\\xf3\\\\x4c\\\\xe1\\\\x00\\\\x34\\\\x4d\\\\x81\\\\x62\\\\xc3\\\\x4e\\\\x21\\\\x06\\\\x17\\\\x4e\\\\xbf\\\\xe8\\\\xa4\\\\x4f\\\\x5e\\\\x08\\\\xe2\\\\x4f\\\\xfb\\\\x65\\\\x4c\\\\x50\\\\x97\\\\xfc\\\\x5e\\\\x51\\\\x33\\\\xcc\\\\x94\\\\x51\\\\xce\\\\xd4\\\\x6e\\\\x52\\\\x69\\\\x12\\\\x6e\\\\x53\\\\x02\\\\x85\\\\x17\\\\x53\\\\x9b\\\\x2a\\\\xef\\\\x54\\\\x33\\\\x02\\\\x7d\\\\x54\\\\xca\\\\x0a\\\\x4a\\\\x55\\\\x60\\\\x40\\\\xe2\\\\x55\\\\xf5\\\\xa4\\\\xd2\\\\x56\\\\x8a\\\\x34\\\\xa9\\\\x57\\\\x1d\\\\xee\\\\xf9\\\\x57\\\\xb0\\\\xd2\\\\x55\\\\x58\\\\x42\\\\xdd\\\\x54\\\\x58\\\\xd4\\\\x0e\\\\x8c\\\\x59\\\\x64\\\\x64\\\\x97\\\\x59\\\\xf3\\\\xde\\\\x12\\\\x5a\\\\x82\\\\x79\\\\x99\\\\x5b\\\\x10\\\\x35\\\\xce\\\\x5b\\\\x9d\\\\x11\\\\x53\\\\x5c\\\\x29\\\\x0a\\\\xcc\\\\x5c\\\\xb4\\\\x20\\\\xdf\\\\x5d\\\\x3e\\\\x52\\\\x36\\\\x5d\\\\xc7\\\\x9d\\\\x7b\\\\x5e\\\\x50\\\\x01\\\\x5d\\\\x5e\\\\xd7\\\\x7c\\\\x89\\\\x5f\\\\x5e\\\\x0d\\\\xb2\\\\x5f\\\\xe3\\\\xb3\\\\x8d\\\\x60\\\\x68\\\\x6c\\\\xce\\\\x60\\\\xec\\\\x38\\\\x2f\\\\x61\\\\x6f\\\\x14\\\\x6b\\\\x61\\\\xf1\\\\x00\\\\x3e\\\\x62\\\\x71\\\\xfa\\\\x68\\\\x62\\\\xf2\\\\x01\\\\xac\\\\x63\\\\x71\\\\x14\\\\xcc\\\\x63\\\\xef\\\\x32\\\\x8f\\\\x64\\\\x6c\\\\x59\\\\xbf\\\\x64\\\\xe8\\\\x89\\\\x25\\\\x65\\\\x63\\\\xbf\\\\x91\\\\x65\\\\xdd\\\\xfb\\\\xd2\\\\x66\\\\x57\\\\x3c\\\\xbb\\\\x66\\\\xcf\\\\x81\\\\x1f\\\\x67\\\\x46\\\\xc7\\\\xd7\\\\x67\\\\xbd\\\\x0f\\\\xbc\\\\x68\\\\x32\\\\x57\\\\xaa\\\\x68\\\\xa6\\\\x9e\\\\x80\\\\x69\\\\x19\\\\xe3\\\\x1f\\\\x69\\\\x8c\\\\x24\\\\x6b\\\\x69\\\\xfd\\\\x61\\\\x4a\\\\x6a\\\\x6d\\\\x98\\\\xa3\\\\x6a\\\\xdc\\\\xc9\\\\x64\\\\x6b\\\\x4a\\\\xf2\\\\x78\\\\x6b\\\\xb8\\\\x12\\\\xd0\\\\x6c\\\\x24\\\\x29\\\\x5f\\\\x6c\\\\x8f\\\\x35\\\\x1b\\\\x6c\\\\xf9\\\\x34\\\\xfb\\\\x6d\\\\x62\\\\x27\\\\xf9\\\\x6d\\\\xca\\\\x0d\\\\x14\\\\x6e\\\\x30\\\\xe3\\\\x49\\\\x6e\\\\x96\\\\xa9\\\\x9c\\\\x6e\\\\xfb\\\\x5f\\\\x11\\\\x6f\\\\x5f\\\\x02\\\\xb1\\\\x6f\\\\xc1\\\\x93\\\\x84\\\\x70\\\\x23\\\\x10\\\\x99\\\\x70\\\\x83\\\\x78\\\\xfe\\\\x70\\\\xe2\\\\xcb\\\\xc5\\\\x71\\\\x41\\\\x08\\\\x04\\\\x71\\\\x9e\\\\x2c\\\\xd1\\\\x71\\\\xfa\\\\x39\\\\x48\\\\x72\\\\x55\\\\x2c\\\\x84\\\\x72\\\\xaf\\\\x05\\\\xa6\\\\x73\\\\x07\\\\xc3\\\\xcf\\\\x73\\\\x5f\\\\x66\\\\x25\\\\x73\\\\xb5\\\\xeb\\\\xd0\\\\x74\\\\x0b\\\\x53\\\\xfa\\\\x74\\\\x5f\\\\x9d\\\\xd0\\\\x74\\\\xb2\\\\xc8\\\\x83\\\\x75\\\\x04\\\\xd3\\\\x44\\\\x75\\\\x55\\\\xbd\\\\x4b\\\\x75\\\\xa5\\\\x85\\\\xce\\\\x75\\\\xf4\\\\x2c\\\\x0a\\\\x76\\\\x41\\\\xaf\\\\x3c\\\\x76\\\\x8e\\\\x0e\\\\xa5\\\\x76\\\\xd9\\\\x49\\\\x88\\\\x77\\\\x23\\\\x5f\\\\x2c\\\\x77\\\\x6c\\\\x4e\\\\xda\\\\x77\\\\xb4\\\\x17\\\\xdf\\\\x77\\\\xfa\\\\xb9\\\\x88\\\\x78\\\\x40\\\\x33\\\\x28\\\\x78\\\\x84\\\\x84\\\\x13\\\\x78\\\\xc7\\\\xab\\\\xa1\\\\x79\\\\x09\\\\xa9\\\\x2c\\\\x79\\\\x4a\\\\x7c\\\\x11\\\\x79\\\\x8a\\\\x23\\\\xb0\\\\x79\\\\xc8\\\\x9f\\\\x6d\\\\x7a\\\\x05\\\\xee\\\\xac\\\\x7a\\\\x42\\\\x10\\\\xd8\\\\x7a\\\\x7d\\\\x05\\\\x5a\\\\x7a\\\\xb6\\\\xcb\\\\xa3\\\\x7a\\\\xef\\\\x63\\\\x23\\\\x7b\\\\x26\\\\xcb\\\\x4e\\\\x7b\\\\x5d\\\\x03\\\\x9d\\\\x7b\\\\x92\\\\x0b\\\\x88\\\\x7b\\\\xc5\\\\xe2\\\\x8f\\\\x7b\\\\xf8\\\\x88\\\\x2f\\\\x7c\\\\x29\\\\xfb\\\\xed\\\\x7c\\\\x5a\\\\x3d\\\\x4f\\\\x7c\\\\x89\\\\x4b\\\\xdd\\\\x7c\\\\xb7\\\\x27\\\\x23\\\\x7c\\\\xe3\\\\xce\\\\xb1\\\\x7d\\\\x0f\\\\x42\\\\x17\\\\x7d\\\\x39\\\\x80\\\\xeb\\\\x7d\\\\x62\\\\x8a\\\\xc5\\\\x7d\\\\x8a\\\\x5f\\\\x3f\\\\x7d\\\\xb0\\\\xfd\\\\xf7\\\\x7d\\\\xd6\\\\x66\\\\x8e\\\\x7d\\\\xfa\\\\x98\\\\xa7\\\\x7e\\\\x1d\\\\x93\\\\xe9\\\\x7e\\\\x3f\\\\x57\\\\xfe\\\\x7e\\\\x5f\\\\xe4\\\\x92\\\\x7e\\\\x7f\\\\x39\\\\x56\\\\x7e\\\\x9d\\\\x55\\\\xfb\\\\x7e\\\\xba\\\\x3a\\\\x38\\\\x7e\\\\xd5\\\\xe5\\\\xc5\\\\x7e\\\\xf0\\\\x58\\\\x5f\\\\x7f\\\\x09\\\\x91\\\\xc3\\\\x7f\\\\x21\\\\x91\\\\xb3\\\\x7f\\\\x38\\\\x57\\\\xf5\\\\x7f\\\\x4d\\\\xe4\\\\x50\\\\x7f\\\\x62\\\\x36\\\\x8e\\\\x7f\\\\x75\\\\x4e\\\\x7f\\\\x7f\\\\x87\\\\x2b\\\\xf2\\\\x7f\\\\x97\\\\xce\\\\xbc\\\\x7f\\\\xa7\\\\x36\\\\xb3\\\\x7f\\\\xb5\\\\x63\\\\xb2\\\\x7f\\\\xc2\\\\x55\\\\x95\\\\x7f\\\\xce\\\\x0c\\\\x3d\\\\x7f\\\\xd8\\\\x87\\\\x8d\\\\x7f\\\\xe1\\\\xc7\\\\x6a\\\\x7f\\\\xe9\\\\xcb\\\\xbf\\\\x7f\\\\xf0\\\\x94\\\\x77\\\\x7f\\\\xf6\\\\x21\\\\x81\\\\x7f\\\\xfa\\\\x72\\\\xd0\\\\x7f\\\\xfd\\\\x88\\\\x59\\\\x7f\\\\xff\\\\x62\\\\x15\\\\x7f\\\\xff\\\\xff\\\\xff\\\";\\n    /**\\n     * Convenience function to apply a mask on an integer to extract a certain\\n     * number of bits. Using exponents since solidity still does not support\\n     * shifting.\\n     *\\n     * @param _value The integer whose bits we want to get\\n     * @param _width The width of the bits (in bits) we want to extract\\n     * @param _offset The offset of the bits (in bits) we want to extract\\n     * @return An integer containing _width bits of _value starting at the\\n     *         _offset bit\\n     */\\n    function bits(uint _value, uint _width, uint _offset) pure internal returns (uint) {\\n        return (_value / (2 ** _offset)) & (((2 ** _width)) - 1);\\n    }\\n\\n    function sinTableLookup(uint index) pure internal returns (uint32) {\\n        bytes memory table = SIN_TABLE;\\n        uint offset = (index + 1) * ENTRY_BYTES;\\n        uint32 trigint_value;\\n        assembly {\\n            trigint_value := mload(add(table, offset))\\n        }\\n\\n        return trigint_value;\\n    }\\n\\n    /**\\n     * Return the sine of an integer approximated angle as a signed 16-bit\\n     * integer.\\n     *\\n     * @param _angle A 30-bit angle. This divides the circle into 1073741824\\n     *     angle units, instead of the standard 360 degrees.\\n     * @return The sine result as a number in the range -2147483647 to 2147483647.\\n     */\\n    function sin(uint256 _angle) public pure returns (int) {\\n        uint interp = bits(_angle, INTERP_WIDTH, INTERP_OFFSET);\\n        uint index = bits(_angle, INDEX_WIDTH, INDEX_OFFSET);\\n\\n        bool is_odd_quadrant = (_angle & QUADRANT_LOW_MASK) == 0;\\n        bool is_negative_quadrant = (_angle & QUADRANT_HIGH_MASK) != 0;\\n\\n        if (!is_odd_quadrant) {\\n            index = SINE_TABLE_SIZE - 1 - index;\\n        }\\n\\n        uint x1 = sinTableLookup(index);\\n        uint x2 = sinTableLookup(index + 1);\\n        uint approximation = ((x2 - x1) * interp) / (2 ** INTERP_WIDTH);\\n\\n        int sine;\\n        if (is_odd_quadrant) {\\n            sine = int(x1) + int(approximation);\\n        } else {\\n            sine = int(x2) - int(approximation);\\n        }\\n\\n        if (is_negative_quadrant) {\\n            sine *= -1;\\n        }\\n\\n        return sine;\\n    }\\n}\\n\",\"keccak256\":\"0x286c23e8badf3201fbbd1b1f78958aa780bb815b6388cd004509ed9e81b3b7f7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610c63610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063cb5cc1091461003a575b600080fd5b610054600480360381019061004f9190610298565b61006a565b60405161006191906102de565b60405180910390f35b600080610091836010806008601c6100829190610328565b61008c9190610328565b6101cc565b905060006100ad84600880601c6100a89190610328565b6101cc565b9050600080631000000063ffffffff168616149050600080632000000063ffffffff16871614159050816100f8578260016101006100eb9190610328565b6100f59190610328565b92505b600061010384610209565b63ffffffff169050600061012260018661011d919061035c565b610209565b63ffffffff16905060006010600261013a91906104e5565b8784846101479190610328565b6101519190610530565b61015b91906105b9565b90506000851561017857818461017191906105ea565b9050610187565b8183610184919061067e565b90505b84156101bc577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff816101b99190610712565b90505b8098505050505050505050919050565b600060018360026101dd91906104e5565b6101e79190610328565b8260026101f491906104e5565b856101ff91906105b9565b1690509392505050565b600080604051806104400160405280610404815260200161082a610404913990506000600460ff1660018561023e919061035c565b6102489190610530565b90506000818301519050809350505050919050565b600080fd5b6000819050919050565b61027581610262565b811461028057600080fd5b50565b6000813590506102928161026c565b92915050565b6000602082840312156102ae576102ad61025d565b5b60006102bc84828501610283565b91505092915050565b6000819050919050565b6102d8816102c5565b82525050565b60006020820190506102f360008301846102cf565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061033382610262565b915061033e83610262565b925082821015610351576103506102f9565b5b828203905092915050565b600061036782610262565b915061037283610262565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156103a7576103a66102f9565b5b828201905092915050565b60008160011c9050919050565b6000808291508390505b6001851115610409578086048111156103e5576103e46102f9565b5b60018516156103f45780820291505b8081029050610402856103b2565b94506103c9565b94509492505050565b60008261042257600190506104de565b8161043057600090506104de565b816001811461044657600281146104505761047f565b60019150506104de565b60ff841115610462576104616102f9565b5b8360020a915084821115610479576104786102f9565b5b506104de565b5060208310610133831016604e8410600b84101617156104b45782820a9050838111156104af576104ae6102f9565b5b6104de565b6104c184848460016103bf565b925090508184048111156104d8576104d76102f9565b5b81810290505b9392505050565b60006104f082610262565b91506104fb83610262565b92506105287fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610412565b905092915050565b600061053b82610262565b915061054683610262565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561057f5761057e6102f9565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006105c482610262565b91506105cf83610262565b9250826105df576105de61058a565b5b828204905092915050565b60006105f5826102c5565b9150610600836102c5565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383136000831215161561063b5761063a6102f9565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615610673576106726102f9565b5b828201905092915050565b6000610689826102c5565b9150610694836102c5565b9250827f8000000000000000000000000000000000000000000000000000000000000000018212600084121516156106cf576106ce6102f9565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615610707576107066102f9565b5b828203905092915050565b600061071d826102c5565b9150610728836102c5565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610767576107666102f9565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156107a4576107a36102f9565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156107e1576107e06102f9565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561081e5761081d6102f9565b5b82820290509291505056fe0000000000c90f8801921d20025b26d703242abf03ed26e604b6195d057f00350647d97c0710a34507d95b9e08a2009a096a90490a3308bc0afb68050bc3ac350c8bd35e0d53db920e1bc2e40ee387660fab272b1072a0481139f0cf120116d512c8106e138edbb1145576b1151bdf8515e2144416a81305176dd9de183366e818f8b83c19bdcbf31a82a0251b4732ef1c0b826a1ccf8cb31d934fe51e56ca1e1f19f97b1fdcdc1b209f701c2161b39f2223a4c522e541af23a6887e2467775725280c5d25e845b626a8218527679df42826b92828e5714a29a3c4852a61b1012b1f34eb2bdc4e6f2c98fbba2d553afb2e110a622ecc681e2f8752623041c76030fbc54d31b54a5d326e54c73326e2c233def2873496824f354d905636041ad936ba2013376f9e46382493b038d8fe93398cdd323a402dd13af2eeb73ba51e293c56ba703d07c1d53db832a53e680b2c3f1749b73fc5ec974073f21d4121589a41ce1e64427a41d04325c13543d09aec447acd50452456bc45cd358f46756827471cece647c3c22e4869e664490f57ee49b415334a581c9d4afb6c974b9e038f4c3fdff34ce100344d8162c34e2106174ebfe8a44f5e08e24ffb654c5097fc5e5133cc9451ced46e5269126e53028517539b2aef5433027d54ca0a4a556040e255f5a4d2568a34a9571deef957b0d2555842dd5458d40e8c5964649759f3de125a8279995b1035ce5b9d11535c290acc5cb420df5d3e52365dc79d7b5e50015d5ed77c895f5e0db25fe3b38d60686cce60ec382f616f146b61f1003e6271fa6862f201ac637114cc63ef328f646c59bf64e889256563bf9165ddfbd266573cbb66cf811f6746c7d767bd0fbc683257aa68a69e806919e31f698c246b69fd614a6a6d98a36adcc9646b4af2786bb812d06c24295f6c8f351b6cf934fb6d6227f96dca0d146e30e3496e96a99c6efb5f116f5f02b16fc1938470231099708378fe70e2cbc571410804719e2cd171fa394872552c8472af05a67307c3cf735f662573b5ebd0740b53fa745f9dd074b2c8837504d3447555bd4b75a585ce75f42c0a7641af3c768e0ea576d9498877235f2c776c4eda77b417df77fab988784033287884841378c7aba17909a92c794a7c11798a23b079c89f6d7a05eeac7a4210d87a7d055a7ab6cba37aef63237b26cb4e7b5d039d7b920b887bc5e28f7bf8882f7c29fbed7c5a3d4f7c894bdd7cb727237ce3ceb17d0f42177d3980eb7d628ac57d8a5f3f7db0fdf77dd6668e7dfa98a77e1d93e97e3f57fe7e5fe4927e7f39567e9d55fb7eba3a387ed5e5c57ef0585f7f0991c37f2191b37f3857f57f4de4507f62368e7f754e7f7f872bf27f97cebc7fa736b37fb563b27fc255957fce0c3d7fd8878d7fe1c76a7fe9cbbf7ff094777ff621817ffa72d07ffd88597fff62157fffffffa264697066735822122093e1d67b33d2f66efdddad6e469d54c40376391aae0e6de0a53d7da9161f8a6964736f6c634300080d0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063cb5cc1091461003a575b600080fd5b610054600480360381019061004f9190610298565b61006a565b60405161006191906102de565b60405180910390f35b600080610091836010806008601c6100829190610328565b61008c9190610328565b6101cc565b905060006100ad84600880601c6100a89190610328565b6101cc565b9050600080631000000063ffffffff168616149050600080632000000063ffffffff16871614159050816100f8578260016101006100eb9190610328565b6100f59190610328565b92505b600061010384610209565b63ffffffff169050600061012260018661011d919061035c565b610209565b63ffffffff16905060006010600261013a91906104e5565b8784846101479190610328565b6101519190610530565b61015b91906105b9565b90506000851561017857818461017191906105ea565b9050610187565b8183610184919061067e565b90505b84156101bc577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff816101b99190610712565b90505b8098505050505050505050919050565b600060018360026101dd91906104e5565b6101e79190610328565b8260026101f491906104e5565b856101ff91906105b9565b1690509392505050565b600080604051806104400160405280610404815260200161082a610404913990506000600460ff1660018561023e919061035c565b6102489190610530565b90506000818301519050809350505050919050565b600080fd5b6000819050919050565b61027581610262565b811461028057600080fd5b50565b6000813590506102928161026c565b92915050565b6000602082840312156102ae576102ad61025d565b5b60006102bc84828501610283565b91505092915050565b6000819050919050565b6102d8816102c5565b82525050565b60006020820190506102f360008301846102cf565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061033382610262565b915061033e83610262565b925082821015610351576103506102f9565b5b828203905092915050565b600061036782610262565b915061037283610262565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156103a7576103a66102f9565b5b828201905092915050565b60008160011c9050919050565b6000808291508390505b6001851115610409578086048111156103e5576103e46102f9565b5b60018516156103f45780820291505b8081029050610402856103b2565b94506103c9565b94509492505050565b60008261042257600190506104de565b8161043057600090506104de565b816001811461044657600281146104505761047f565b60019150506104de565b60ff841115610462576104616102f9565b5b8360020a915084821115610479576104786102f9565b5b506104de565b5060208310610133831016604e8410600b84101617156104b45782820a9050838111156104af576104ae6102f9565b5b6104de565b6104c184848460016103bf565b925090508184048111156104d8576104d76102f9565b5b81810290505b9392505050565b60006104f082610262565b91506104fb83610262565b92506105287fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610412565b905092915050565b600061053b82610262565b915061054683610262565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561057f5761057e6102f9565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006105c482610262565b91506105cf83610262565b9250826105df576105de61058a565b5b828204905092915050565b60006105f5826102c5565b9150610600836102c5565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383136000831215161561063b5761063a6102f9565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615610673576106726102f9565b5b828201905092915050565b6000610689826102c5565b9150610694836102c5565b9250827f8000000000000000000000000000000000000000000000000000000000000000018212600084121516156106cf576106ce6102f9565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615610707576107066102f9565b5b828203905092915050565b600061071d826102c5565b9150610728836102c5565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610767576107666102f9565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156107a4576107a36102f9565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156107e1576107e06102f9565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561081e5761081d6102f9565b5b82820290509291505056fe0000000000c90f8801921d20025b26d703242abf03ed26e604b6195d057f00350647d97c0710a34507d95b9e08a2009a096a90490a3308bc0afb68050bc3ac350c8bd35e0d53db920e1bc2e40ee387660fab272b1072a0481139f0cf120116d512c8106e138edbb1145576b1151bdf8515e2144416a81305176dd9de183366e818f8b83c19bdcbf31a82a0251b4732ef1c0b826a1ccf8cb31d934fe51e56ca1e1f19f97b1fdcdc1b209f701c2161b39f2223a4c522e541af23a6887e2467775725280c5d25e845b626a8218527679df42826b92828e5714a29a3c4852a61b1012b1f34eb2bdc4e6f2c98fbba2d553afb2e110a622ecc681e2f8752623041c76030fbc54d31b54a5d326e54c73326e2c233def2873496824f354d905636041ad936ba2013376f9e46382493b038d8fe93398cdd323a402dd13af2eeb73ba51e293c56ba703d07c1d53db832a53e680b2c3f1749b73fc5ec974073f21d4121589a41ce1e64427a41d04325c13543d09aec447acd50452456bc45cd358f46756827471cece647c3c22e4869e664490f57ee49b415334a581c9d4afb6c974b9e038f4c3fdff34ce100344d8162c34e2106174ebfe8a44f5e08e24ffb654c5097fc5e5133cc9451ced46e5269126e53028517539b2aef5433027d54ca0a4a556040e255f5a4d2568a34a9571deef957b0d2555842dd5458d40e8c5964649759f3de125a8279995b1035ce5b9d11535c290acc5cb420df5d3e52365dc79d7b5e50015d5ed77c895f5e0db25fe3b38d60686cce60ec382f616f146b61f1003e6271fa6862f201ac637114cc63ef328f646c59bf64e889256563bf9165ddfbd266573cbb66cf811f6746c7d767bd0fbc683257aa68a69e806919e31f698c246b69fd614a6a6d98a36adcc9646b4af2786bb812d06c24295f6c8f351b6cf934fb6d6227f96dca0d146e30e3496e96a99c6efb5f116f5f02b16fc1938470231099708378fe70e2cbc571410804719e2cd171fa394872552c8472af05a67307c3cf735f662573b5ebd0740b53fa745f9dd074b2c8837504d3447555bd4b75a585ce75f42c0a7641af3c768e0ea576d9498877235f2c776c4eda77b417df77fab988784033287884841378c7aba17909a92c794a7c11798a23b079c89f6d7a05eeac7a4210d87a7d055a7ab6cba37aef63237b26cb4e7b5d039d7b920b887bc5e28f7bf8882f7c29fbed7c5a3d4f7c894bdd7cb727237ce3ceb17d0f42177d3980eb7d628ac57d8a5f3f7db0fdf77dd6668e7dfa98a77e1d93e97e3f57fe7e5fe4927e7f39567e9d55fb7eba3a387ed5e5c57ef0585f7f0991c37f2191b37f3857f57f4de4507f62368e7f754e7f7f872bf27f97cebc7fa736b37fb563b27fc255957fce0c3d7fd8878d7fe1c76a7fe9cbbf7ff094777ff621817ffa72d07ffd88597fff62157fffffffa264697066735822122093e1d67b33d2f66efdddad6e469d54c40376391aae0e6de0a53d7da9161f8a6964736f6c634300080d0033",
  "devdoc": {
    "author": "Daniel Serrano",
    "kind": "dev",
    "methods": {
      "sin(uint256)": {
        "params": {
          "_angle": "A 30-bit angle. This divides the circle into 1073741824     angle units, instead of the standard 360 degrees."
        },
        "returns": {
          "_0": "The sine result as a number in the range -2147483647 to 2147483647."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "sin(uint256)": {
        "notice": "Return the sine of an integer approximated angle as a signed 16-bit integer."
      }
    },
    "notice": "SPDX-Licenses-Identifier: MIT Basic trigonometry functions Based on the Trigonometry Library by Lefteris Karapetsas: https://github.com/Sikorkaio/sikorka/blob/master/contracts/trigonometry.sol  This version implements a 32-bit lookup tables instead of a 16-bit. This allows accurate topological operations on small areas with very close coordinates.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}